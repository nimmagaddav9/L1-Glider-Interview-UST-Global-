Q1 solution:
const cluster = require('cluster');
const http = require('http');
const numCPUs = require('os').cpus().length;

if (cluster.isMaster) {
  // Fork workers
  console.log(Master process is running on PID: ${process.pid});
  for (let i = 0; i < numCPUs; i++) {
    cluster.fork(); // Forks a new worker process
  }

  cluster.on('exit', (worker, code, signal) => {
    console.log(Worker ${worker.process.pid} died);
  });
} else {
  // Worker processes
  http.createServer((req, res) => {
    res.writeHead(200);
    res.end('Hello, World!');
  }).listen(8000);

  console.log(Worker process is running on PID: ${process.pid});
}

==============================================================

Q2 Solution: 
const jwt = require('jsonwebtoken');

function TokenAuth(req, res, next) {
  const authHeader = req.headers['authorization'];
  const token = authHeader && authHeader.split(' ')[1];

  if (!token) {
    return res.status(401).json({ error: 'No token provided' });
  }

  jwt.verify(token, process.env.TOKEN_SECRET, (err, user) => {
    if (err) {
      return res.status(403).json({ error: 'Invalid or expired token' });
    }
    req.user = user;
    next();
  });
}

================================================================

Q3: Solution
import React, { useState } from 'react';

export function NameForm(props) {
  const [name, setName] = useState('');

  const handleChange = (event) => {
    setName(event.target.value);
  };

  const handleSubmit = (event) => {
    event.preventDefault();
    alert(A name was submitted: ${name});
    // You can handle the submission logic here, e.g., send data to a server or update the parent component
  };

  return (
    <form onSubmit={handleSubmit}>
      <label>
        Name:
        <input
          type="text"
          value={name}
          onChange={handleChange}
          placeholder="Enter your name"
        />
      </label>
      <button type="submit">Submit</button>
    </form>
  );
}

======================================================================

